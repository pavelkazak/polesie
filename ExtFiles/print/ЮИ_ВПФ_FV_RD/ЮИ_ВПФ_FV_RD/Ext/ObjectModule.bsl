
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Перем ЯзыкиПартнеров;
	
#Область ПрограммныйИнтерфейс

// Возвращает сведения о внешней обработке.
Функция СведенияОВнешнейОбработке() Экспорт
	
	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке("2.2.2.1");
	
	ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиПечатнаяФорма();
	ПараметрыРегистрации.Версия = "2.9";
	ПараметрыРегистрации.Назначение.Добавить("Документ.СчетФактураВыданный");
	ПараметрыРегистрации.БезопасныйРежим = Ложь;
	
	НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
	НоваяКоманда.Представление = НСтр("ru = 'RD'");
	НоваяКоманда.Идентификатор = "RD";
	НоваяКоманда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	НоваяКоманда.ПоказыватьОповещение = Истина;
	НоваяКоманда.Модификатор = "ПечатьMXL";	
	
	//НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
	//НоваяКоманда.Представление = НСтр("ru = 'FV оплата курьеру'");
	//НоваяКоманда.Идентификатор = "FV оплата курьеру";
	//НоваяКоманда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	//НоваяКоманда.ПоказыватьОповещение = Истина;
	//НоваяКоманда.Модификатор = "ПечатьMXL";	
	//
	//НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
	//НоваяКоманда.Представление = НСтр("ru = 'FV отсрочка платежа'");
	//НоваяКоманда.Идентификатор = "FV отсрочка платежа";
	//НоваяКоманда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	//НоваяКоманда.ПоказыватьОповещение = Истина;
	//НоваяКоманда.Модификатор = "ПечатьMXL";	
	//
	//НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
	//НоваяКоманда.Представление = НСтр("ru = 'FV предоплата'");
	//НоваяКоманда.Идентификатор = "FV предоплата";
	//НоваяКоманда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	//НоваяКоманда.ПоказыватьОповещение = Истина;
	//НоваяКоманда.Модификатор = "ПечатьMXL";	
	
	НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
	НоваяКоманда.Представление = НСтр("ru = 'FV'");
	НоваяКоманда.Идентификатор = "FV";
	НоваяКоманда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	НоваяКоманда.ПоказыватьОповещение = Истина;
	НоваяКоманда.Модификатор = "ПечатьMXL";	
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

// Интерфейс для выполнения команд обработки.
// Экспорт		
	//Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода)
Процедура Печать(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода, Отладка = Ложь) Экспорт

	ПараметрыПечати = Новый Структура;
	ПараметрыПечати.Вставить("ПечатьВВалюте", Истина);
	
	СтруктураТипов = ОбщегоНазначенияУТ.СоответствиеМассивовПоТипамОбъектов(МассивОбъектов);
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "RD") Тогда
		
		ПараметрыПечати.Вставить("Тип", "RD");
	
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, 
			"RD", 
			"RD", 
			СформироватьПечатнуюФорму(СтруктураТипов, ОбъектыПечати, ПараметрыПечати));
			
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "FV оплата курьеру") Тогда
		
		ПараметрыПечати.Вставить("Тип", "FV оплата курьеру");
	
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, 
			"FV оплата курьеру", 
			"FV оплата курьеру", 
			СформироватьПечатнуюФорму(СтруктураТипов, ОбъектыПечати, ПараметрыПечати));
			
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "FV отсрочка платежа") Тогда
		
		ПараметрыПечати.Вставить("Тип", "FV отсрочка платежа");
	
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, 
			"FV отсрочка платежа", 
			"FV отсрочка платежа", 
			СформироватьПечатнуюФорму(СтруктураТипов, ОбъектыПечати, ПараметрыПечати));
			
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "FV предоплата") Тогда
		
		ПараметрыПечати.Вставить("Тип", "FV предоплата");
	
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, 
			"FV предоплата", 
			"FV предоплата", 
			СформироватьПечатнуюФорму(СтруктураТипов, ОбъектыПечати, ПараметрыПечати));
			
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "FV") Тогда
		
		ПараметрыПечати.Вставить("Тип", "FV");
	
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, 
			"FV", 
			"FV", 
			СформироватьПечатнуюФорму(СтруктураТипов, ОбъектыПечати, ПараметрыПечати));
			
	КонецЕсли;
	
	ФормированиеПечатныхФорм.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов, КоллекцияПечатныхФорм);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Печать

Функция СформироватьПечатнуюФорму(СтруктураТипов, ОбъектыПечати, ПараметрыПечати, КомплектыПечати = Неопределено, Приложение = Ложь, Горизонтальная = Ложь, ТолькоТитульный = Неопределено, ТолькоПриложение = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	ЯзыкиПартнеров = Новый Соответствие;
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СчетФактураВЭС_" + ПараметрыПечати.Тип;
	
	НомерТипаДокумента = 0;
	
	Для Каждого СтруктураОбъектов Из СтруктураТипов Цикл
		
		НомерТипаДокумента = НомерТипаДокумента + 1;
		Если НомерТипаДокумента > 1 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(СтруктураОбъектов.Ключ);
	
		ДанныеДляПечати = МенеджерОбъекта.ПолучитьДанныеДляПечатнойФормыСчетФактура(ПараметрыПечати, СтруктураОбъектов.Значение);
	
		ЗаполнитьТабличныйДокумент(
				ТабличныйДокумент,
				ДанныеДляПечати,
				Горизонтальная,
				ОбъектыПечати,
				ПараметрыПечати,
				КомплектыПечати);
		
		Возврат ТабличныйДокумент;
		
	КонецЦикла;
	
КонецФункции

Процедура ЗаполнитьТабличныйДокумент(ТабличныйДокумент, ДанныеДляПечати, Горизонтальная, ОбъектыПечати, ПараметрыПечати, КомплектыПечати)
	
	#Если Сервер и не Сервер Тогда
	ТабличныйДокумент = Новый ТабличныйДокумент;
	#КонецЕсли
		
	ДанныеПечати        = ДанныеДляПечати.РезультатПоШапке.Выбрать();
	ВыборкаПоДокументамВсе = ДанныеДляПечати.РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаКонтрагентов = Неопределено;
	//Если ДанныеДляПечати.Свойство("РезультатПоКонтрагентам") тогда
	//	ВыборкаКонтрагентов = ДанныеДляПечати.РезультатПоКонтрагентам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//КонецЕсли;
	Если ДанныеДляПечати.Свойство("РезультатПоИсходнымДанным") Тогда
		ВыборкаОснований = ДанныеДляПечати.РезультатПоИсходнымДанным.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	КонецЕсли;
	
	ТабНоменклатура = ДанныеДляПечати.РезультатПоТабличнойЧасти.Выгрузить();
	ДополнитьДанныеНоменклатуры(ТабНоменклатура);
	
	Если ПараметрыПечати.Тип = "RD" Тогда
		Постфикс = "RD";
	Иначе
		Постфикс = "FV";
	КонецЕсли;
	
	ПервыйДокумент = Истина;
	Пока ДанныеПечати.Следующий() Цикл
		
		РеквизитыСчетаФактуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеПечати.Ссылка,
			"ЮИ_ВидСчетаФактуры, ЮИ_ПричинаКорректировки, ЮИ_Подпись, СчетФактураОснование");
	
		Если ДанныеПечати.Исправление Тогда
			Макет = ПолучитьМакет("ПФ_MXL_СчетФактураПольшаКорректировочный");
			ВыборкаПоДокументам = ВыборкаПоДокументамКорректировка(ДанныеПечати.Ссылка);
		ИначеЕсли ДанныеПечати.КорректировочныйСчетФактура Тогда
			Макет = ПолучитьМакет("ПФ_MXL_СчетФактураПольшаКорректировочный");
		//	ВыборкаПоДокументам = ВыборкаПоДокументамВсе;
			ВыборкаПоДокументам = ВыборкаПоДокументамКорректировка(ДанныеПечати.Ссылка);
		Иначе
			Макет = ПолучитьМакет("ПФ_MXL_СчетФактураПольша");
			ВыборкаПоДокументам = ВыборкаПоДокументамВсе;
		КонецЕсли;
		
		//ВнешнийНомер = УправлениеСвойствами.ЗначениеСвойства(ДанныеПечати.Ссылка, "СчетФактураВыданный_ВнешнийНомер");
		
		Заказы = ПолучитьЗаказыСчетаФактуры(ДанныеПечати.Ссылка);
		
		ИтогиНДС = Новый ТаблицаЗначений;
		ИтогиНДС.Колонки.Добавить("СтавкаНДС");
		ИтогиНДС.Колонки.Добавить("СуммаБезНДС");
		ИтогиНДС.Колонки.Добавить("СуммаНДС");
		ИтогиНДС.Колонки.Добавить("СуммаСНДС");
		ИтогиНДС.Колонки.Добавить("СуммаБезНДСРазница");
		ИтогиНДС.Колонки.Добавить("СуммаНДСРазница");
		ИтогиНДС.Колонки.Добавить("СуммаСНДСРазница");
		
		// ЮИБ Казак П.В. 11.02.2019 +++
		АвансыНДС = ИтогиНДС.СкопироватьКолонки();
		// ЮИБ Казак П.В. 11.02.2019 ---
		
		СписокОснований = Новый Массив;
		
		ВыборкаОснований.Сбросить();
		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
		ВыборкаОснований.НайтиСледующий(СтруктураПоиска);
		ВыборкаОснования = ВыборкаОснований.Выбрать();
		
		// ЮИ_Головчик В.В. 07.02.2019 +++
		// "Дату платежа" убрал, так как в РТУ, убрали реквизит "ДатаПлатежа" 
        // РеквизитыРТУ = "БанковскийСчетОрганизации, БанковскийСчетКонтрагента, ЦенаВключаетНДС, Соглашение, АдресДоставки, ДатаПлатежа, ФормаОплаты";
		РеквизитыРТУ = "БанковскийСчетОрганизации, БанковскийСчетКонтрагента, ЦенаВключаетНДС, Соглашение, АдресДоставки, ФормаОплаты";
        // ЮИ_Головчик В.В. 07.02.2019 ---

		
		РеквизитыОснования = Новый Структура(РеквизитыРТУ);	
		РеквизитыОснования.ЦенаВключаетНДС = Ложь;
		ИсходныеДокументы = Новый Массив;
		Пока ВыборкаОснования.Следующий() Цикл
			Если ЗначениеЗаполнено(ВыборкаОснования.ИсходныйДокумент) Тогда
				ИсходныеДокументы.Добавить(ВыборкаОснования.ИсходныйДокумент);
			КонецЕсли;
			Если ТипЗнч(ВыборкаОснования.ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
				РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВыборкаОснования.ДокументОснование, РеквизитыРТУ);
				СписокОснований.Добавить(ВыборкаОснования.ДокументОснование);
				
				// ЮИ_Головчик В.В. 07.02.2019 +++
				// Дату платежа получим, так как в РТУ, убрали реквизит "ДатаПлатежа"
				РеквизитыОснования.Вставить("ДатаПлатежа");
				РеквизитыОснования.ДатаПлатежа = ПолучитьДатуПлаетежаГрафикаПлатежейРТУ(ВыборкаОснования.ДокументОснование);
				// ЮИ_Головчик В.В. 07.02.2019 ---
				
				//Прервать;
			КонецЕсли;
		КонецЦикла;
		РеквизитыСчетаФактуры.Вставить("ИсходныеДокументы", ИсходныеДокументы);
		
		//1)	Если в РТУ указана форма оплаты наличная, то это оплата курьеру. 
		//2)	Иначе определяется наличие авансов и вывод блока оплат (формат - предоплата) осуществляется в следующих случаях: 
		// - если есть Счета-фактуры на аванс
		// - если в текущем месяце есть Поступления БДС, дата которых меньше даты Счета фактуры.
		//3)	Если авансов подходящих под условие выше нет, то формат – отсрочка платежа (блок оплат не выводится).

		//ГрафикПлатежей = ПолучитьГрафикПлатежей(Заказы);
		//Если ГрафикПлатежей.Количество() Тогда
		//	
		//	РеквизитыОснования.Вставить("СрокОплаты", ГрафикПлатежей[0].ДатаПлатежа);
		//	РеквизитыОснования.Вставить("СпособОплаты", ГрафикПлатежей[0].ФормаОплаты);
		//	
		//	// автоопределение типа печатной формы
		//	Если ПараметрыПечати.Тип = "FV" Тогда
		//		Если ГрафикПлатежей[0].ФормаОплаты = Перечисления.ФормыОплаты.Наличная Тогда
		//			ПараметрыПечати.Тип = "FV оплата курьеру";
		//		ИначеЕсли ГрафикПлатежей[0].ВариантОплаты = Перечисления.ВариантыОплатыКлиентом.КредитПослеОтгрузки Тогда
		//			ПараметрыПечати.Тип = "FV отсрочка платежа";
		//		Иначе
		//			ПараметрыПечати.Тип = "FV предоплата";
		//		КонецЕсли;
		//	КонецЕсли;
		//	
		//Иначе
		//	
			РеквизитыОснования.Вставить("СрокОплаты", РеквизитыОснования.ДатаПлатежа);
			РеквизитыОснования.Вставить("СпособОплаты", РеквизитыОснования.ФормаОплаты);
			
			// автоопределение типа печатной формы
			Если ПараметрыПечати.Тип = "FV" Тогда
				Если РеквизитыОснования.ФормаОплаты = Перечисления.ФормыОплаты.Наличная Тогда
					ПараметрыПечати.Тип = "FV оплата курьеру";
				Иначе
					
					ОбъектыРасчетов = Новый Массив;
					Для каждого СтрокаЗаказ Из Заказы Цикл
						ОбъектыРасчетов.Добавить(СтрокаЗаказ.ЗаказКлиента);
					КонецЦикла; 
					Для каждого Основание Из СписокОснований Цикл
						ОбъектыРасчетов.Добавить(Основание);
					КонецЦикла; 
					Авансы = ПолучитьАвансы(ДанныеПечати.Ссылка, ОбъектыРасчетов);
					Если Авансы.Количество() Тогда
						ПараметрыПечати.Тип = "FV предоплата";
					Иначе
						ПараметрыПечати.Тип = "FV отсрочка платежа";
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
		//	
		//КонецЕсли;
		
		Если ПараметрыПечати.Тип = "FV" Тогда
			ПараметрыПечати.Тип = "FV предоплата"; // по умолчанию если автоматом не определили
		КонецЕсли;
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ОпцииПечатиСчетаФактуры = Новый Структура;
		ОпцииПечатиСчетаФактуры.Вставить("Макет", Макет);
		ОпцииПечатиСчетаФактуры.Вставить("Постфикс", Постфикс);
		ОпцииПечатиСчетаФактуры.Вставить("Тип", ПараметрыПечати.Тип);
		
		// Выводим общие реквизиты шапки
		СведенияОбОрганизации = Новый Структура;
		ЗаполнитьРеквизитыШапкиСчетФактура(
			ДанныеПечати,
			РеквизитыОснования,
			Заказы,
			СведенияОбОрганизации,
			ВыборкаКонтрагентов,
			ТабличныйДокумент, 
			ОпцииПечатиСчетаФактуры,
			СписокОснований,
			РеквизитыСчетаФактуры);
		
		// Выводим заголовок таблицы
		ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Валюта", ДанныеПечати.Валюта);
		
		ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
		
		НомерСтраницы = 1;
		
		// Создаем массив для проверки вывода
		МассивВыводимыхОбластей = Новый Массив;
		
		// Выводим многострочную часть документа
		ОбластьМакетаСтандарт = Макет.ПолучитьОбласть("Строка");
		ОбластьПодвала = Макет.ПолучитьОбласть("Подвал");
		
		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
		ВыборкаПоДокументам.НайтиСледующий(СтруктураПоиска);
		
		СтрокаТовары = ВыборкаПоДокументам.Выбрать();
		КоличествоСтрок = СтрокаТовары.Количество();
		ТолькоСтавкаБезНДС = Истина;
		НомерСтроки = 0;
		СтруктураИтогов = Новый Структура("СуммаБезНДС, СуммаНДС, СуммаСНДС, СуммаБезНДСРазница, СуммаНДСРазница, СуммаСНДСРазница", 0, 0, 0, 0, 0, 0);
		
		Пока СтрокаТовары.Следующий() Цикл
			
			//Если ДанныеПечати.Исправление
			//	И СтрокаТовары.РазницаБезНДСУвеличение = 0
			//	И СтрокаТовары.РазницаБезНДСУменьшение = 0
			//	И СтрокаТовары.РазницаНДСУвеличение = 0
			//	И СтрокаТовары.РазницаНДСУменьшение = 0
			//	И СтрокаТовары.РазницаСНДСУвеличение = 0
			//	И СтрокаТовары.РазницаСНДСУменьшение = 0
			//	Тогда
			//	
			//	Продолжить;
			//	
			//КонецЕсли;
			
			ОбластьМакета = ОбластьМакетаСтандарт;
			
			НомерСтроки = НомерСтроки + 1;
			ЗаполнитьРеквизитыСтрокиТовара(СтрокаТовары, 
										   ОбластьМакета,
										   НомерСтроки,
										   РеквизитыОснования,
										   СтруктураИтогов,
										   ИтогиНДС);
			
			//СтруктураПараметров = Новый Структура;
			ДанныеНоменклатуры = ТабНоменклатура.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", СтрокаТовары.Номенклатура, СтрокаТовары.Характеристика))[0];
			ОбластьМакета.Параметры.Заполнить(ДанныеНоменклатуры);
			
			МассивВыводимыхОбластей.Очистить();
			МассивВыводимыхОбластей.Добавить(ОбластьМакета);
			
			Если НомерСтроки = КоличествоСтрок Тогда
				МассивВыводимыхОбластей.Добавить(ОбластьПодвала);
			КонецЕсли;
			
			Если НЕ ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
				
				НомерСтраницы = НомерСтраницы + 1;
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				
				ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
				
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		КонецЦикла;
		
		// Итоги по тч
		// ЮИ_Головчик В.В. 07.02.2019 +++

		Если НЕ (ПараметрыПечати.Тип = "FV оплата курьеру") 
		   И НЕ (ПараметрыПечати.Тип = "FV отсрочка платежа")
		   //И НЕ (ПараметрыПечати.Тип = "FV предоплата")
		   Тогда
			ОбластьИтогТаблицы = Макет.ПолучитьОбласть("ИтогТаблицы");
			ОбластьИтогТаблицы.Параметры.Заполнить(СтруктураИтогов);
			ТабличныйДокумент.Вывести(ОбластьИтогТаблицы);
		КонецЕсли;
		// ЮИ_Головчик В.В. 07.02.2019 ---
		
		// Выводим итоги по документу
		
		ТабличныйДокументЛево = Новый ТабличныйДокумент;
		
		Если ПараметрыПечати.Тип = "FV предоплата" Тогда
		//ИначеЕсли ПараметрыПечати.Тип = "FV частичная предоплата" 
		
		//	ОбъектыРасчетов = Новый Массив;
		//	Для каждого СтрокаЗаказ Из Заказы Цикл
		//		ОбъектыРасчетов.Добавить(СтрокаЗаказ.ЗаказКлиента);
		//	КонецЦикла; 
		//	Для каждого Основание Из СписокОснований Цикл
		//		ОбъектыРасчетов.Добавить(Основание);
		//	КонецЦикла; 
		//	Авансы = ПолучитьАвансы(ДанныеПечати.Ссылка, ОбъектыРасчетов);
		//
			СуммаКОплате = ИтогиНДС.Итог("СуммаСНДС") - Авансы.Итог("СуммаСНДС");
			
			// ЮИБ Казак П.В. 11.02.2019 +++
			ОбластьИсправить = ТабличныйДокумент.НайтиТекст("%СрокОплаты%");
			ОбластьИсправить.Текст = ?(СуммаКОплате = 0, "zapłacone", РеквизитыОснования.СрокОплаты);
			// ЮИБ Казак П.В. 11.02.2019 ---
				
			СчетаФактуры = Авансы.НайтиСтроки(Новый Структура("Вид", "СчетФактура"));
			Оплаты = Авансы.НайтиСтроки(Новый Структура("Вид", "Оплата"));
			
			Если СчетаФактуры.Количество() Тогда
				
				ОбластьШапкаИтога = 	Макет.ПолучитьОбласть("Шапка"	+"Аванс"+"|Лево");
				ОбластьСтрокаИтога = 	Макет.ПолучитьОбласть("Строка"	+"Аванс"+"|Лево");
				ОбластьИтого = 			Макет.ПолучитьОбласть("Итого"	+"Аванс"+"|Лево");
				
				ТабличныйДокументЛево.Вывести(ОбластьШапкаИтога);
				
				СуммаСНДС = 0;
				Для каждого СтрокаАванс Из СчетаФактуры Цикл
					ОбластьСтрокаИтога.Параметры.Заполнить(СтрокаАванс);
					ОбластьСтрокаИтога.Параметры.Документ = "" + СтрокаАванс.ПредставлениеДокумента + " " + СтрокаАванс.Номер;
					ТабличныйДокументЛево.Вывести(ОбластьСтрокаИтога);
					СуммаСНДС = СуммаСНДС + СтрокаАванс.СуммаСНДС;
					
					ИтогНДС = ИтогиНДС.Добавить();
					ЗаполнитьЗначенияСвойств(ИтогНДС, СтрокаАванс);
					ИтогНДС.СуммаНДС = 		-СтрокаАванс.СуммаНДС;
					ИтогНДС.СуммаСНДС = 	-СтрокаАванс.СуммаСНДС;
					ИтогНДС.СуммаБезНДС = 	-СтрокаАванс.СуммаБезНДС;
					
					// ЮИБ Казак П.В. 11.02.2019 +++
					АвансНДС = АвансыНДС.Добавить();
					ЗаполнитьЗначенияСвойств(АвансНДС, ИтогНДС);
					// ЮИБ Казак П.В. 11.02.2019 ---
					
				КонецЦикла; 
				
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("СуммаСНДС", СуммаСНДС);
				СтруктураПараметров.Вставить("СуммаПрописью", 
					ЧислоПрописью(СуммаСНДС, "L=pl_PL;SN=true;FN=true;FS=false", "złoty, złote, złotych, m, grosz, grosze, groszy, m, 2"));
				ОбластьИтого.Параметры.Заполнить(СтруктураПараметров);
				ТабличныйДокументЛево.Вывести(ОбластьИтого);
				
			КонецЕсли;
			
			Если Оплаты.Количество() Тогда
				
				ОбластьШапкаИтога = 	Макет.ПолучитьОбласть("Шапка"	+"Оплата"+"|Лево");
				ОбластьСтрокаИтога = 	Макет.ПолучитьОбласть("Строка"	+"Оплата"+"|Лево");
				ОбластьИтого = 			Макет.ПолучитьОбласть("Итого"	+"Оплата"+"|Лево");
				
				ТабличныйДокументЛево.Вывести(ОбластьШапкаИтога);
				
				СуммаСНДС = 0;
				Для каждого СтрокаАванс Из Оплаты Цикл
					ОбластьСтрокаИтога.Параметры.Заполнить(СтрокаАванс);
					ОбластьСтрокаИтога.Параметры.Документ = "" + СтрокаАванс.ПредставлениеДокумента + " " + СтрокаАванс.Номер;
					ТабличныйДокументЛево.Вывести(ОбластьСтрокаИтога);
					СуммаСНДС = СуммаСНДС + СтрокаАванс.СуммаСНДС;
				КонецЦикла; 
				
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("СуммаСНДС", СуммаСНДС);
				СтруктураПараметров.Вставить("СуммаПрописью", 
					ЧислоПрописью(СуммаСНДС, "L=pl_PL;SN=true;FN=true;FS=false", "złoty, złote, złotych, m, grosz, grosze, groszy, m, 2"));
				СтруктураПараметров.Вставить("СуммаКОплате", СуммаКОплате);
				СтруктураПараметров.Вставить("СуммаКОплатеПрописью", 
					ЧислоПрописью(СуммаКОплате, "L=pl_PL;SN=true;FN=true;FS=false", "złoty, złote, złotych, m, grosz, grosze, groszy, m, 2"));
				ОбластьИтого.Параметры.Заполнить(СтруктураПараметров);
				ТабличныйДокументЛево.Вывести(ОбластьИтого);
				
			КонецЕсли;
			
			Если СчетаФактуры.Количество() = 0 и Оплаты.Количество() = 0 Тогда
				ОбластьШапкаИтога = 	Макет.ПолучитьОбласть("ШапкаИтога"	+"|Лево");
				ТабличныйДокументЛево.Вывести(ОбластьШапкаИтога);
			КонецЕсли;
		
			
		Иначе
			ОбластьШапкаИтога = 	Макет.ПолучитьОбласть("ШапкаИтога"	+"|Лево");
			//ОбластьСтрокаИтога = 	Макет.ПолучитьОбласть("СтрокаИтога"	+"|Лево");
			//ОбластьИтого = 			Макет.ПолучитьОбласть("Итого"		+"|Лево");
			
			ТабличныйДокументЛево.Вывести(ОбластьШапкаИтога);
		КонецЕсли;

		
		ТабличныйДокументПраво = Новый ТабличныйДокумент;
		
		ОбластьШапкаИтога = 	Макет.ПолучитьОбласть("ШапкаИтога"	+"|Право");
		ОбластьСтрокаИтога = 	Макет.ПолучитьОбласть("СтрокаИтога"	+"|Право");
		ОбластьИтого = 			Макет.ПолучитьОбласть("Итого"		+"|Право");
		ОбластьИтогоПоАвансам = Макет.ПолучитьОбласть("ИтогоПоАвансам" +"|Право"); // ЮИБ Казак П.В. 11.02.2019
		
		ИтогиНДС.Свернуть("СтавкаНДС", "СуммаБезНДС, СуммаНДС, СуммаСНДС, СуммаБезНДСРазница, СуммаНДСРазница, СуммаСНДСРазница");
		
		// ЮИБ Казак П.В. 11.02.2019 +++
		АвансыНДС.Свернуть("СтавкаНДС", "СуммаБезНДС, СуммаНДС, СуммаСНДС, СуммаБезНДСРазница, СуммаНДСРазница, СуммаСНДСРазница");
		Если АвансыНДС.Количество() Тогда
			
			ТабличныйДокументПраво.Вывести(ОбластьШапкаИтога);
			Для каждого АвансНДС Из АвансыНДС Цикл
			
				ОбластьСтрокаИтога.Параметры.Заполнить(АвансНДС);
				ТабличныйДокументПраво.Вывести(ОбластьСтрокаИтога);
			
			КонецЦикла; 
			АвансыНДС.Свернуть(, "СуммаБезНДС, СуммаНДС, СуммаСНДС, СуммаБезНДСРазница, СуммаНДСРазница, СуммаСНДСРазница");
			ОбластьИтогоПоАвансам.Параметры.Заполнить(АвансыНДС[0]);
			ТабличныйДокументПраво.Вывести(ОбластьИтогоПоАвансам);
			
		КонецЕсли;
		// ЮИБ Казак П.В. 11.02.2019 ---
		
		ТабличныйДокументПраво.Вывести(ОбластьШапкаИтога);
		Для каждого ИтогНДС Из ИтогиНДС Цикл
		
			ОбластьСтрокаИтога.Параметры.Заполнить(ИтогНДС);
			ТабличныйДокументПраво.Вывести(ОбластьСтрокаИтога);
		
		КонецЦикла; 
		ИтогиНДС.Свернуть(, "СуммаБезНДС, СуммаНДС, СуммаСНДС, СуммаБезНДСРазница, СуммаНДСРазница, СуммаСНДСРазница");
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("СуммаПрописью", 
			ЧислоПрописью(ИтогиНДС[0].СуммаСНДС, "L=pl_PL;SN=true;FN=true;FS=false", "złoty, złote, złotych, m, grosz, grosze, groszy, m, 2"));
		СтруктураПараметров.Вставить("СуммаРазницаПрописью", 
			ЧислоПрописью(ИтогиНДС[0].СуммаСНДСРазница, "L=pl_PL;SN=true;FN=true;FS=false", "złoty, złote, złotych, m, grosz, grosze, groszy, m, 2"));
		
		ОбластьИтого.Параметры.Заполнить(ДанныеПечати);
		ОбластьИтого.Параметры.Заполнить(ИтогиНДС[0]);
		ОбластьИтого.Параметры.Заполнить(СтруктураПараметров);
		ТабличныйДокументПраво.Вывести(ОбластьИтого);
		
		ТабличныйДокумент.Вывести(ТабличныйДокументЛево.ПолучитьОбласть(1,1,ТабличныйДокументЛево.ПолучитьРазмерОбластиДанныхПоВертикали(),ТабличныйДокументЛево.ПолучитьРазмерОбластиДанныхПоГоризонтали()));
		ТабличныйДокумент.Присоединить(ТабличныйДокументПраво.ПолучитьОбласть(1,1,ТабличныйДокументПраво.ПолучитьРазмерОбластиДанныхПоВертикали(),ТабличныйДокументПраво.ПолучитьРазмерОбластиДанныхПоГоризонтали()));
			
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Ответственный", РеквизитыСчетаФактуры.ЮИ_Подпись); //Пользователи.ТекущийПользователь());
		
		ОбластьПодвала.Параметры.Заполнить(СтруктураПараметров);

		ТабличныйДокумент.Вывести(ОбластьПодвала);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
			
	КонецЦикла;
	
КонецПроцедуры //ЗаполнитьТабличныйДокументТН2()

Процедура ЗаполнитьРеквизитыШапкиСчетФактура(ДанныеПечати, РеквизитыОснования, Заказы, СведенияОПоставщике, ДанныеКонтрагентов, ТабличныйДокумент, ОпцииПечатиСчетаФактуры, СписокОснований, РеквизитыСчетаФактуры)
	
	
	Макет = ОпцииПечатиСчетаФактуры.Макет;
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка"+ОпцииПечатиСчетаФактуры.Постфикс);
	ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
	
	НомераДаты = Новый Структура("Номер, Дата, НомерИсправления, ДатаИсправления, РеквизитыОснований");
	
	НомераДаты.Номер = Справочники.ЮИ_ВидыСчетовФактур.ПолучитьНомерНаПечать(РеквизитыСчетаФактуры.ЮИ_ВидСчетаФактуры, ДанныеПечати.Номер, ДанныеПечати.Дата);
	НомераДаты.Дата = Формат(ДанныеПечати.Дата, "ДФ=dd.MM.yyyy");
		
	ОбластьМакета.Параметры.Заполнить(НомераДаты);
	
	СтруктураПараметров = Новый Структура;
	
	СведенияОПоставщике = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата, , РеквизитыОснования.БанковскийСчетОрганизации);
		
	СтруктураПараметров.Вставить("НазваниеОрганизации", СведенияОПоставщике.НаименованиеДляПечатныхФорм);
	СтруктураПараметров.Вставить("АдресОрганизации", СведенияОПоставщике.ЮридическийАдрес);
	СтруктураПараметров.Вставить("NIPОрганизации", СведенияОПоставщике.ИНН);
	СтруктураПараметров.Вставить("ТелефонОрганизации", СведенияОПоставщике.Телефоны);
	СтруктураПараметров.Вставить("БанкОрганизации", СведенияОПоставщике.Банк);
	СтруктураПараметров.Вставить("БИКОрганизации", СокрЛП(СведенияОПоставщике.БИК));
	СтруктураПараметров.Вставить("НомерСчетаОрганизации", СокрЛП(СведенияОПоставщике.НомерСчета));
	СтруктураПараметров.Вставить("ЭлАдресОрганизации", 
		УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ДанныеПечати.Организация, Справочники.ВидыКонтактнойИнформации.EmailОрганизации, ДанныеПечати.Дата));
		
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить("Tel. " + СтруктураПараметров.ТелефонОрганизации);
	МассивСтрок.Добавить("E-mail: " + СтруктураПараметров.ЭлАдресОрганизации);
	СтруктураПараметров.Вставить("КИОрганизации", СоединитьСтроку(МассивСтрок, ","+Символы.ПС));
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(СтруктураПараметров.НомерСчетаОрганизации);
	МассивСтрок.Добавить(СтруктураПараметров.БанкОрганизации);
	СтруктураПараметров.Вставить("РасчетныйСчетОрганизации", СоединитьСтроку(МассивСтрок, ", "));
	
	СведенияОПокупателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Контрагент, ДанныеПечати.Дата);
	
	СтруктураПараметров.Вставить("НазваниеПокупателя", СведенияОПокупателе.НаименованиеДляПечатныхФорм);
	СтруктураПараметров.Вставить("АдресПокупателя", СведенияОПокупателе.ЮридическийАдрес);
	СтруктураПараметров.Вставить("NIPПокупателя", ?(ЗначениеЗаполнено(СведенияОПокупателе.ИНН), СведенияОПокупателе.ИНН, СведенияОПокупателе.НалоговыйНомерВСтранеРегистрации));
	СтруктураПараметров.Вставить("ТелефонПокупателя", СведенияОПокупателе.Телефоны);
	СтруктураПараметров.Вставить("БанкПокупателя", СведенияОПокупателе.Банк);
	СтруктураПараметров.Вставить("БИКПокупателя", СокрЛП(СведенияОПокупателе.БИК));
	СтруктураПараметров.Вставить("НомерСчетаПокупателя", СокрЛП(СведенияОПокупателе.НомерСчета));
	СтруктураПараметров.Вставить("ЭлАдресПокупателя", 
		УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ДанныеПечати.Контрагент, Справочники.ВидыКонтактнойИнформации.EmailКонтрагента, ДанныеПечати.Дата));

	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить("Tel. " + СтруктураПараметров.ТелефонПокупателя);
	МассивСтрок.Добавить("E-mail: " + СтруктураПараметров.ЭлАдресПокупателя);
	СтруктураПараметров.Вставить("КИПокупателя", СоединитьСтроку(МассивСтрок, ","+Символы.ПС));
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(СтруктураПараметров.НомерСчетаПокупателя);
	МассивСтрок.Добавить(СтруктураПараметров.БанкПокупателя);
	СтруктураПараметров.Вставить("РасчетныйСчетПокупателя", СоединитьСтроку(МассивСтрок, ", "));
	
	СведенияОГрузополучателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Грузополучатель, ДанныеПечати.Дата);
	
	СтруктураПараметров.Вставить("НазваниеГрузополучателя", СведенияОГрузополучателе.НаименованиеДляПечатныхФорм);
	СтруктураПараметров.Вставить("АдресГрузополучателя", ?(ЗначениеЗаполнено(РеквизитыОснования.АдресДоставки), РеквизитыОснования.АдресДоставки, СведенияОГрузополучателе.ФактическийАдрес));
	СтруктураПараметров.Вставить("NIPГрузополучателя", ?(ЗначениеЗаполнено(СведенияОГрузополучателе.ИНН), СведенияОГрузополучателе.ИНН, СведенияОГрузополучателе.НалоговыйНомерВСтранеРегистрации));
	СтруктураПараметров.Вставить("ТелефонГрузополучателя", СведенияОГрузополучателе.Телефоны);
	СтруктураПараметров.Вставить("БанкГрузополучателя", СведенияОГрузополучателе.Банк);
	СтруктураПараметров.Вставить("БИКГрузополучателя", СокрЛП(СведенияОГрузополучателе.БИК));
	СтруктураПараметров.Вставить("НомерСчетаГрузополучателя", СокрЛП(СведенияОГрузополучателе.НомерСчета));
	СтруктураПараметров.Вставить("ЭлАдресГрузополучателя", 
		УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ДанныеПечати.Грузополучатель, Справочники.ВидыКонтактнойИнформации.EmailКонтрагента, ДанныеПечати.Дата));
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить("Tel. " + СтруктураПараметров.ТелефонГрузополучателя);
	МассивСтрок.Добавить("E-mail: " + СтруктураПараметров.ЭлАдресГрузополучателя);
	СтруктураПараметров.Вставить("КИГрузополучателя", СоединитьСтроку(МассивСтрок, ","+Символы.ПС));
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(СтруктураПараметров.НомерСчетаГрузополучателя);
	МассивСтрок.Добавить(СтруктураПараметров.БанкГрузополучателя);
	СтруктураПараметров.Вставить("РасчетныйСчетГрузополучателя", СоединитьСтроку(МассивСтрок, ", "));
	
	СпособыОплаты = Новый Соответствие;
	СпособыОплаты.Вставить("RD", 						"Gotуwka");
	СпособыОплаты.Вставить("FV оплата курьеру", 		"Gotówka przy odbioze");
	СпособыОплаты.Вставить("FV отсрочка платежа", 		"Przelew");
	СпособыОплаты.Вставить("FV предоплата", 			"Przelew");
	СпособыОплаты.Вставить("FV частичная предоплата", 	"Przelew");
	СтруктураПараметров.Вставить("СпособОплаты", СпособыОплаты[ОпцииПечатиСчетаФактуры.Тип]);
	
	СтруктураПараметров.Вставить("ПричинаКорректировки", РеквизитыСчетаФактуры.ЮИ_ПричинаКорректировки);
	
	Если ЗначениеЗаполнено(РеквизитыСчетаФактуры.СчетФактураОснование) Тогда
		РеквизитыСФОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыСчетаФактуры.СчетФактураОснование, "Номер, Дата, ЮИ_ВидСчетаФактуры");
		НомерСФОснования = Справочники.ЮИ_ВидыСчетовФактур.ПолучитьНомерНаПечать(РеквизитыСФОснования.ЮИ_ВидСчетаФактуры, РеквизитыСФОснования.Номер, РеквизитыСФОснования.Дата);
		СтруктураПараметров.Вставить("ПредставлениеСчетаФактуры", "" + НомерСФОснования + " z dnia " + Формат(РеквизитыСФОснования.Дата, "ДФ=dd.MM.yyyy"));
	ИначеЕсли РеквизитыСчетаФактуры.ИсходныеДокументы.Количество() Тогда
		ПредставлениеСчетаФактуры = "";
		Для Каждого СчетФактураОснование Из РеквизитыСчетаФактуры.ИсходныеДокументы Цикл
			РеквизитыСФОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СчетФактураОснование, "Номер, Дата, ЮИ_ВидСчетаФактуры");
			НомерСФОснования = Справочники.ЮИ_ВидыСчетовФактур.ПолучитьНомерНаПечать(РеквизитыСФОснования.ЮИ_ВидСчетаФактуры, РеквизитыСФОснования.Номер, РеквизитыСФОснования.Дата);
			ПредставлениеСчетаФактуры = ПредставлениеСчетаФактуры + ?(ЗначениеЗаполнено(ПредставлениеСчетаФактуры), Символы.ПС, "");
			ПредставлениеСчетаФактуры = ПредставлениеСчетаФактуры + НомерСФОснования + " z dnia " + Формат(РеквизитыСФОснования.Дата, "ДФ=dd.MM.yyyy");
			СтруктураПараметров.Вставить("ПредставлениеСчетаФактуры", ПредставлениеСчетаФактуры);
		КонецЦикла;
	КонецЕсли;
	
	ПредставлениеЗаказов = "";
	Для каждого СтрокаЗаказ Из Заказы Цикл
	
		ПредставлениеЗаказов = ПредставлениеЗаказов + ?(ЗначениеЗаполнено(ПредставлениеЗаказов), "; ", "");
		ПредставлениеЗаказов = ПредставлениеЗаказов + ?(ЗначениеЗаполнено(СтрокаЗаказ.НомерПоДаннымКлиента), СокрЛП(СтрокаЗаказ.НомерПоДаннымКлиента), СокрЛП(СтрокаЗаказ.Номер));
	
	КонецЦикла; 
	СтруктураПараметров.Вставить("ПредставлениеЗаказов", ПредставлениеЗаказов);
	
	ПредставлениеНакладных = "";
	РеквизитыРТУ = "Номер, Дата";
	Для Каждого ДокументОснование Из СписокОснований Цикл
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			ЗначенияРеквизитовОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, РеквизитыРТУ);
			ПредставлениеНакладных = ПредставлениеНакладных + ?(ЗначениеЗаполнено(ПредставлениеНакладных), Символы.ПС, "");
			ПредставлениеНакладных = ПредставлениеНакладных + ЗначенияРеквизитовОснования.Номер + " z dnia " + Формат(ЗначенияРеквизитовОснования.Дата, "ДФ=dd.MM.yyyy");
		КонецЕсли;
	КонецЦикла;
	СтруктураПараметров.Вставить("ПредставлениеНакладных", ПредставлениеНакладных);
	
	Если ОпцииПечатиСчетаФактуры.Тип = "FV оплата курьеру" Тогда
		СтруктураПараметров.Вставить("СрокОплаты", "za pobraniem");
	// ЮИБ Казак П.В. 11.02.2019 +++
	ИначеЕсли ОпцииПечатиСчетаФактуры.Тип = "FV предоплата" Тогда
		СтруктураПараметров.Вставить("СрокОплаты", "%СрокОплаты%");
	// ЮИБ Казак П.В. 11.02.2019 ---
	КонецЕсли;
	
	ОбластьМакета.Параметры.Заполнить(РеквизитыОснования);
	ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыСтрокиТовара(СтрокаТовары, ОбластьМакета, НомерСтроки, РеквизитыОснования, СтруктураИтогов, ИтогиНДС)
	
	ОбластьМакета.Параметры.Заполнить(СтрокаТовары);
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("НомерСтроки", НомерСтроки);
	
	// пересчитанные суммы по каждой строке для расчета итога по таблице {
	// ЮИ_Головчик В.В. 07.02.2019 +++
	//  В модуле  "Ценообразование" нет такой процедуры возможно из-за перехода на новую версию , теперь модуль "ЦенообразованиеКлиентСервер" 
	// , пока в попытку исключения
	Попытка
		СтруктураПараметров.Вставить("СуммаНДС", Ценообразование.РассчитатьСуммуНДС(СтрокаТовары.СуммаБезНДС, СтрокаТовары.СтавкаНДС, РеквизитыОснования.ЦенаВключаетНДС));
	Исключение	
		СтруктураПараметров.Вставить("СуммаНДС", ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(СтрокаТовары.СуммаБезНДС, СтрокаТовары.СтавкаНДС, РеквизитыОснования.ЦенаВключаетНДС));
	КонецПопытки;	
	// ЮИ_Головчик В.В. 07.02.2019 ---

	СтруктураПараметров.Вставить("СуммаСНДС", СтруктураПараметров.СуммаНДС + СтрокаТовары.СуммаБезНДС);
	// }
	
	ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);
	
	СтруктураИтогов.СуммаБезНДС = 	СтруктураИтогов.СуммаБезНДС + 	СтрокаТовары.СуммаБезНДС;
	СтруктураИтогов.СуммаНДС = 		СтруктураИтогов.СуммаНДС + 		СтруктураПараметров.СуммаНДС;
	СтруктураИтогов.СуммаСНДС = 	СтруктураИтогов.СуммаСНДС + 	СтруктураПараметров.СуммаСНДС;
	
	СтруктураПараметров.Вставить("СуммаСНДСРазница", 	СтрокаТовары.СуммаСНДС - 	СтрокаТовары.СуммаСНДСДо);
	СтруктураПараметров.Вставить("СуммаНДСРазница", 	СтрокаТовары.СуммаНДС - 	СтрокаТовары.СуммаНДСДо);
	СтруктураПараметров.Вставить("СуммаБезНДСРазница", 	СтрокаТовары.СуммаБезНДС - 	СтрокаТовары.СуммаБезНДСДо);
	СтруктураПараметров.Вставить("КоличествоРазница", 	СтрокаТовары.Количество - 	СтрокаТовары.КоличествоДо);

	СтруктураИтогов.СуммаСНДСРазница = 		СтруктураИтогов.СуммаСНДСРазница + 		СтруктураПараметров.СуммаСНДСРазница;
	СтруктураИтогов.СуммаНДСРазница = 		СтруктураИтогов.СуммаНДСРазница + 		СтруктураПараметров.СуммаНДСРазница;
	СтруктураИтогов.СуммаБезНДСРазница = 	СтруктураИтогов.СуммаБезНДСРазница + 	СтруктураПараметров.СуммаБезНДСРазница;
	
	// Если Исправление
	//СтруктураИтогов.СуммаСНДСРазница = 		СтруктураИтогов.СуммаСНДСРазница + 		СтрокаТовары.СуммаСНДСРазница;
	//СтруктураИтогов.СуммаНДСРазница = 		СтруктураИтогов.СуммаНДСРазница + 		СтрокаТовары.СуммаНДСРазница;
	//СтруктураИтогов.СуммаБезНДСРазница = 		СтруктураИтогов.СуммаБезНДСРазница + 	СтрокаТовары.СуммаБезНДСРазница;
	
	ИтогНДС = ИтогиНДС.Добавить();
	ЗаполнитьЗначенияСвойств(ИтогНДС, СтруктураПараметров);
	ЗаполнитьЗначенияСвойств(ИтогНДС, СтрокаТовары); // обязательно во вторую очередь, т.к. в СТрокаТовары "оригинальные" суммы из табчасти для расчета итогов по НДС
	
КонецПроцедуры

Процедура ДополнитьДанныеНоменклатуры(ТаблицаТоваров)
	
	ТаблицаТоваров.Свернуть("Номенклатура, Характеристика");
	
	ЯзыкПольский = Справочники.ЯзыкиНародовМира.НайтиПоКоду("192");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
		|	ТаблицаТоваров.Характеристика КАК Характеристика
		|ПОМЕСТИТЬ ТаблицаТоваров
		|ИЗ
		|	&ТаблицаТоваров КАК ТаблицаТоваров
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
		|	ТаблицаТоваров.Характеристика КАК Характеристика,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ДопРеквизитыШК.Значение, """") = """"
		|			ТОГДА ШтрихкодыНоменклатуры.Штрихкод
		|		ИНАЧЕ ДопРеквизитыШК.Значение
		|	КОНЕЦ КАК Штрихкод,
		|	СпрНоменклатура.Артикул КАК Артикул,
		|	ЕдИзмНаПольском.Наименование КАК ЕдИзм,
		|	НоменклатураНаПольском.Наименование КАК НоменклатураНаименованиеПольское
		|ИЗ
		|	ТаблицаТоваров КАК ТаблицаТоваров
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЮИ_НаименованияОбъектовНаРазныхЯзыках КАК ЕдИзмНаПольском
		|			ПО СпрНоменклатура.ЕдиницаИзмерения = ЕдИзмНаПольском.Объект
		|				И (&ЯзыкПольский = ЕдИзмНаПольском.Язык)
		|		ПО ТаблицаТоваров.Номенклатура = СпрНоменклатура.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЮИ_НаименованияОбъектовНаРазныхЯзыках КАК НоменклатураНаПольском
		|		ПО ТаблицаТоваров.Номенклатура = НоменклатураНаПольском.Объект
		|			И (&ЯзыкПольский = НоменклатураНаПольском.Язык)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|		ПО ТаблицаТоваров.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
		|			И ТаблицаТоваров.Характеристика = ШтрихкодыНоменклатуры.Характеристика
		|			И (ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) = ШтрихкодыНоменклатуры.Упаковка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК ДопРеквизитыШК
		|		ПО ТаблицаТоваров.Номенклатура = ДопРеквизитыШК.Ссылка
		|			И (&ДопРеквизитШК = ДопРеквизитыШК.Свойство)
		|ГДЕ
		|	НЕ ТаблицаТоваров.Номенклатура ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
	Запрос.УстановитьПараметр("ДопРеквизитШК", ЮИ_ДопСвойстваКлиентСерверПовтИсп.ПолучитьДопСвойство("Номенклатура_EAN13"));
	Запрос.УстановитьПараметр("ЯзыкПольский", ЯзыкПольский);
	
	ТаблицаТоваров = Запрос.Выполнить().Выгрузить();
	ТаблицаТоваров.Индексы.Добавить("Номенклатура, Характеристика");
	
КонецПроцедуры

Функция ПолучитьАвансы(СчетФактура, ОбъектыРасчетов)
	
	// актуализация взаиморасчетов
	
	//УстановитьПривилегированныйРежим(Истина);
	//
	//Запрос = Новый Запрос;
	//Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	//Запрос.Текст =
	//"ВЫБРАТЬ
	//|	СчетФактураВыданныйДокументыОснования.Ссылка КАК Ссылка,
	//|	СчетФактураВыданныйДокументыОснования.Ссылка.Организация КАК Организация,
	//|	СчетФактураВыданныйДокументыОснования.ДокументОснование КАК ДокументОснование
	//|ПОМЕСТИТЬ ТаблицаЗаполненияПлатежноРасчетныхДокументов
	//|ИЗ
	//|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	//|ГДЕ
	//|	СчетФактураВыданныйДокументыОснования.Ссылка = &Ссылка";
	//Запрос.УстановитьПараметр("Ссылка", СчетФактура);
	//Запрос.Выполнить();
	//
	//МассивАналитикУчетаПоПартнерам = АналитикиУчетаПоПартнерамДляАктуализацииПлатежноРасчетныхДокументов(Запрос.МенеджерВременныхТаблиц);
	//КонецРасчета = КонецРасчетаДляАктуализацииПлатежноРасчетныхДокументов(Запрос.МенеджерВременныхТаблиц);
	//
	//Если МассивАналитикУчетаПоПартнерам.Количество() > 0 Тогда 
	//	АналитикиРасчета = РаспределениеВзаиморасчетовВызовСервера.АналитикиРасчета();
	//	АналитикиРасчета.АналитикиУчетаПоПартнерам = МассивАналитикУчетаПоПартнерам;
	//	Попытка
	//		РаспределениеВзаиморасчетовВызовСервера.РаспределитьВсеРасчетыСКлиентами(КонецРасчета, АналитикиРасчета);
	//	Исключение
	//		ТекстСообщения = НСтр("ru ='Печатная форма сформирована по неактуальным данным.
	//		|Необходимо актуализировать взаиморасчеты вручную и переформировать печатную форму.'");
	//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	//	КонецПопытки;
	//КонецЕсли;
	//
	//УстановитьПривилегированныйРежим(Ложь);
	
	// получение данных
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	
		//|ВЫБРАТЬ РАЗЛИЧНЫЕ
		//|	ВЫБОР
		//|		КОГДА НЕ РасчетыВзаимозачета.РасчетныйДокумент ЕСТЬ NULL
		//|			ТОГДА ЕСТЬNULL(РасчетыВзаимозачета.РасчетныйДокумент, НЕОПРЕДЕЛЕНО)
		//|		ИНАЧЕ Расчеты.РасчетныйДокумент
		//|	КОНЕЦ КАК РасчетныйДокумент,
		//|	Расчеты.Предоплата КАК Предоплата,
		//|	Расчеты.Валюта КАК Валюта
		//|ПОМЕСТИТЬ ВтТаблицаДокументов
		//|ИЗ
		//|	РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК Расчеты
		//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК РасчетыВзаимозачета
		//|		ПО (РасчетыВзаимозачета.Регистратор = Расчеты.РасчетныйДокумент)
		//|			И (Расчеты.РасчетныйДокумент ССЫЛКА Документ.ВзаимозачетЗадолженности)
		//|ГДЕ
		//|	Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		//|	И Расчеты.Предоплата > 0
		//|	И Расчеты.Активность
		//|	И Расчеты.Регистратор В(&ОбъектыРасчетов)
		//|	И Расчеты.АналитикаУчетаПоПартнерам В(&АналитикаУчетаПоПартнерам)
		//|	И Расчеты.Период МЕЖДУ &НачалоПериода И &КонецПериода
		//|
		//|ИНДЕКСИРОВАТЬ ПО
		//|	РасчетныйДокумент
		//|;
		//|
		//|////////////////////////////////////////////////////////////////////////////////
		//|ВЫБРАТЬ
		//|	ДанныеДокумента.Ссылка КАК Ссылка,
		//|	ДанныеДокумента.Дата КАК Дата,
		//|	ДанныеДокумента.Номер КАК Номер,
		//|	ДанныеДокумента.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
		//|	ДанныеДокумента.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
		//|	ТаблицаДокументов.Предоплата КАК Предоплата,
		//|	ТаблицаДокументов.Валюта КАК Валюта
		//|ПОМЕСТИТЬ Авансы
		//|ИЗ
		//|	Документ.ПоступлениеБезналичныхДенежныхСредств КАК ДанныеДокумента
		//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтТаблицаДокументов КАК ТаблицаДокументов
		//|		ПО ДанныеДокумента.Ссылка = ТаблицаДокументов.РасчетныйДокумент
		//|
		//|ОБЪЕДИНИТЬ ВСЕ
		//|
		//|ВЫБРАТЬ
		//|	ДанныеДокумента.Ссылка,
		//|	ДанныеДокумента.Дата,
		//|	ДанныеДокумента.Номер,
		//|	0,
		//|	0,
		//|	ТаблицаДокументов.Предоплата,
		//|	ТаблицаДокументов.Валюта
		//|ИЗ
		//|	Документ.ПриходныйКассовыйОрдер КАК ДанныеДокумента
		//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтТаблицаДокументов КАК ТаблицаДокументов
		//|		ПО ДанныеДокумента.Ссылка = ТаблицаДокументов.РасчетныйДокумент
		//|
		//|ОБЪЕДИНИТЬ ВСЕ
		//|
		//|ВЫБРАТЬ
		//|	ДанныеДокумента.Ссылка,
		//|	ДанныеДокумента.Дата,
		//|	ДанныеДокумента.Номер,
		//|	0,
		//|	0,
		//|	ТаблицаДокументов.Предоплата,
		//|	ТаблицаДокументов.Валюта
		//|ИЗ
		//|	Документ.ОперацияПоПлатежнойКарте КАК ДанныеДокумента
		//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтТаблицаДокументов КАК ТаблицаДокументов
		//|		ПО ДанныеДокумента.Ссылка = ТаблицаДокументов.РасчетныйДокумент
		//|;
		//|
		//|////////////////////////////////////////////////////////////////////////////////
	
		"ВЫБРАТЬ
		|	СчетФактураВыданныйДокументыОснования.ДокументОснование КАК ДокументОснование
		|ПОМЕСТИТЬ Основания
		|ИЗ
		|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
		|ГДЕ
		|	СчетФактураВыданныйДокументыОснования.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РеализацияТоваровУслугТовары.ЗаказКлиента КАК Документ
		|ПОМЕСТИТЬ ОбъектыРасчетов
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Основания КАК Основания
		|		ПО РеализацияТоваровУслугТовары.Ссылка = Основания.ДокументОснование
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Основания.ДокументОснование
		|ИЗ
		|	Основания КАК Основания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасчетыСКлиентамиОбороты.Регистратор КАК Регистратор,
		|	РасчетыСКлиентамиОбороты.СуммаРасход КАК Сумма,
		|	РасчетыСКлиентамиОбороты.Валюта КАК Валюта,
		|	РасчетыСКлиентамиОбороты.Регистратор.Дата КАК Дата,
		|	РасчетыСКлиентамиОбороты.Регистратор.Номер КАК Номер
		|ПОМЕСТИТЬ ДанныеАвансов
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			Регистратор,
		|			ЗаказКлиента В
		|				(ВЫБРАТЬ
		|					ОбъектыРасчетов.Документ КАК Документ
		|				ИЗ
		|					ОбъектыРасчетов КАК ОбъектыРасчетов)) КАК РасчетыСКлиентамиОбороты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			НАЧАЛОПЕРИОДА(СчетФактураВыданный.Дата, ДЕНЬ) КАК ДатаСФ
		|		ИЗ
		|			Документ.СчетФактураВыданный КАК СчетФактураВыданный
		|		ГДЕ
		|			СчетФактураВыданный.Ссылка = &Ссылка) КАК ВложенныйЗапрос
		|		ПО РасчетыСКлиентамиОбороты.Период < ВложенныйЗапрос.ДатаСФ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	ДанныеДокумента.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
		|	ДанныеДокумента.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
		|	ДанныеАвансов.Сумма КАК Предоплата,
		|	ДанныеАвансов.Валюта КАК Валюта
		|ПОМЕСТИТЬ Авансы
		|ИЗ
		|	Документ.ПоступлениеБезналичныхДенежныхСредств КАК ДанныеДокумента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеАвансов КАК ДанныеАвансов
		|		ПО ДанныеДокумента.Ссылка = ДанныеАвансов.Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЮИ_ДанныеАвансовПоЗаказам.СчетФактураВыданныйАванс КАК СчетФактура,
		|	ЮИ_ДанныеАвансовПоЗаказам.Валюта КАК Валюта,
		|	ЮИ_ДанныеАвансовПоЗаказам.СуммаСНДС КАК СуммаСНДС,
		|	ЮИ_ДанныеАвансовПоЗаказам.СтавкаНДС КАК СтавкаНДС,
		|	ЮИ_ДанныеАвансовПоЗаказам.СуммаНДС КАК СуммаНДС,
		|	ЮИ_ДанныеАвансовПоЗаказам.СуммаБезНДС КАК СуммаБезНДС,
		|	ЮИ_ДанныеАвансовПоЗаказам.ПлатежныйДокумент КАК ПлатежныйДокумент
		|ПОМЕСТИТЬ СчетаФактуры
		|ИЗ
		|	РегистрСведений.ЮИ_ДанныеАвансовПоЗаказам КАК ЮИ_ДанныеАвансовПоЗаказам
		|ГДЕ
		|	ЮИ_ДанныеАвансовПоЗаказам.ОбъектРасчетов В
		|			(ВЫБРАТЬ
		|				ОбъектыРасчетов.Документ КАК Документ
		|			ИЗ
		|				ОбъектыРасчетов КАК ОбъектыРасчетов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	""СчетФактура"" КАК Вид,
		|	СчетаФактуры.СчетФактура КАК Документ,
		|	СчетаФактуры.Валюта КАК Валюта,
		|	СчетаФактуры.СуммаСНДС КАК СуммаСНДС,
		|	СчетаФактуры.СчетФактура КАК СчетФактура,
		|	СчетаФактуры.СтавкаНДС КАК СтавкаНДС,
		|	СчетаФактуры.СуммаНДС КАК СуммаНДС,
		|	СчетаФактуры.СуммаБезНДС КАК СуммаБезНДС,
		|	СчетаФактуры.СчетФактура.Дата КАК Дата,
		|	СчетаФактуры.СчетФактура.Номер КАК Номер,
		|	""Faktura VAT zaliczki"" КАК ПредставлениеДокумента
		|ИЗ
		|	СчетаФактуры КАК СчетаФактуры
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""Оплата"",
		|	Авансы.Ссылка,
		|	Авансы.Валюта,
		|	Авансы.Предоплата,
		|	NULL,
		|	NULL,
		|	0,
		|	0,
		|	Авансы.Дата,
		|	Авансы.Номер,
		|	ВЫБОР
		|		КОГДА Авансы.Ссылка ССЫЛКА Документ.ПоступлениеБезналичныхДенежныхСредств
		|			ТОГДА ""Przelew wchodzący""
		|		ИНАЧЕ ТИПЗНАЧЕНИЯ(Авансы.Ссылка)
		|	КОНЕЦ
		|ИЗ
		|	Авансы КАК Авансы
		|ГДЕ
		|	НЕ Авансы.Ссылка В
		|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|					СчетаФактуры.ПлатежныйДокумент КАК ПлатежныйДокумент
		|				ИЗ
		|					СчетаФактуры КАК СчетаФактуры)";
		//|	И Авансы.Дата < &ДатаСФ";
	
		//|
		//|ОБЪЕДИНИТЬ ВСЕ
		//|
		//|ВЫБРАТЬ
		//|	""Оплата"",
		//|	РасчетыСКлиентами.РасчетныйДокумент,
		//|	РасчетыСКлиентами.Валюта,
		//|	-РасчетыСКлиентами.ДолгРасход + РасчетыСКлиентами.ПредоплатаРасход,
		//|	NULL,
		//|	NULL,
		//|	0,
		//|	0,
		//|	РасчетыСКлиентами.РасчетныйДокумент.Дата,
		//|	РасчетыСКлиентами.РасчетныйДокумент.Номер,
		//|	ВЫБОР
		//|		КОГДА РасчетыСКлиентами.РасчетныйДокумент ССЫЛКА Документ.ПоступлениеБезналичныхДенежныхСредств
		//|			ТОГДА ""Przelew wchodzący""
		//|		ИНАЧЕ ТИПЗНАЧЕНИЯ(РасчетыСКлиентами.РасчетныйДокумент)
		//|	КОНЕЦ
		//|ИЗ
		//|	РегистрНакопления.РасчетыСКлиентамиПоДокументам.Обороты(
		//|			&НачалоПериода,
		//|			&КонецПериода,
		//|			,
		//|			АналитикаУчетаПоПартнерам В (&АналитикаУчетаПоПартнерам)
		//|				И ЗаказКлиента В (&ОбъектыРасчетов)
		//|				И НЕ РасчетныйДокумент В
		//|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
		//|							СчетаФактуры.ПлатежныйДокумент КАК ПлатежныйДокумент
		//|						ИЗ
		//|							СчетаФактуры КАК СчетаФактуры)) КАК РасчетыСКлиентами";
		
		
		
	Запрос.УстановитьПараметр("Ссылка", СчетФактура);
//	Запрос.УстановитьПараметр("ОбъектыРасчетов", ОбъектыРасчетов);
//	Запрос.УстановитьПараметр("ДатаСФ", СчетФактура.Дата);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(СчетФактура.Дата));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(СчетФактура.Дата));
//	Запрос.УстановитьПараметр("АналитикаУчетаПоПартнерам", МассивАналитикУчетаПоПартнерам);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция АналитикиУчетаПоПартнерамДляАктуализацииПлатежноРасчетныхДокументов(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Расчеты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК Расчеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаЗаполненияПлатежноРасчетныхДокументов КАК ТаблицаДокументов
	|		ПО Расчеты.Регистратор = ТаблицаДокументов.ДокументОснование
	|			И Расчеты.АналитикаУчетаПоПартнерам.Организация = ТаблицаДокументов.Организация
	|ГДЕ
	|	Расчеты.Активность";
	
	ТаблицаАналитик = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаАналитик.ВыгрузитьКолонку("АналитикаУчетаПоПартнерам");
	
КонецФункции

Функция КонецРасчетаДляАктуализацииПлатежноРасчетныхДокументов(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(Расчеты.Период), ДАТАВРЕМЯ(1,1,1)) КАК Период
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК Расчеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаЗаполненияПлатежноРасчетныхДокументов КАК ТаблицаДокументов
	|		ПО Расчеты.Регистратор = ТаблицаДокументов.ДокументОснование
	|			И Расчеты.АналитикаУчетаПоПартнерам.Организация = ТаблицаДокументов.Организация
	|ГДЕ
	|	Расчеты.Активность
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(Расчеты.Период) ЕСТЬ НЕ NULL";
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		ТаблицаПериод = Результат.Выгрузить();
		КонецРасчета = КонецМесяца(ТаблицаПериод[0].Период) + 1;
	Иначе
		КонецРасчета = КонецМесяца(ТекущаяДатаСеанса())+1;
	КонецЕсли;
	
	Возврат КонецРасчета;
	
КонецФункции


// ЮИ_Головчик В.В. 07.02.2019 +++
Функция ПолучитьДатуПлаетежаГрафикаПлатежейРТУ(Ссылка)

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РеализацияТоваровУслугЭтапыГрафикаОплаты.ДатаПлатежа КАК ДатаПлатежа
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.ЭтапыГрафикаОплаты КАК РеализацияТоваровУслугЭтапыГрафикаОплаты
		|ГДЕ
		|	РеализацияТоваровУслугЭтапыГрафикаОплаты.Ссылка В(&Ссылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаПлатежа";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.ДатаПлатежа;
	Иначе
		Возврат Дата("00010101");
	КонецЕсли;
	
	
КонецФункции

// ЮИ_Головчик В.В. 07.02.2019 ---

Функция ПолучитьГрафикПлатежей(Заказы)

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказКлиентаЭтапыГрафикаОплаты.ВариантОплаты КАК ВариантОплаты,
		|	ЗаказКлиентаЭтапыГрафикаОплаты.Ссылка.ФормаОплаты КАК ФормаОплаты,
		|	ЗаказКлиентаЭтапыГрафикаОплаты.ДатаПлатежа КАК ДатаПлатежа,
		|	ЗаказКлиентаЭтапыГрафикаОплаты.Ссылка.ГрафикОплаты КАК ГрафикОплаты,
		|	ЗаказКлиентаЭтапыГрафикаОплаты.Ссылка.ПорядокОплаты КАК ПорядокОплаты
		|ИЗ
		|	Документ.ЗаказКлиента.ЭтапыГрафикаОплаты КАК ЗаказКлиентаЭтапыГрафикаОплаты
		|ГДЕ
		|	ЗаказКлиентаЭтапыГрафикаОплаты.Ссылка В(&Заказы)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаПлатежа";
	
	Запрос.УстановитьПараметр("Заказы", Заказы);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПолучитьЗаказыСчетаФактуры(СчетФактура)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СчетФактураВыданныйДокументыОснования.ДокументОснование КАК ДокументОснование
		|ПОМЕСТИТЬ ДокументыОснования
		|ИЗ
		|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
		|ГДЕ
		|	СчетФактураВыданныйДокументыОснования.Ссылка = &Ссылка
		|	И СчетФактураВыданныйДокументыОснования.ДокументОснование ССЫЛКА Документ.РеализацияТоваровУслуг
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РеализацияТоваровУслугТовары.ЗаказКлиента КАК ЗаказКлиента,
		|	РеализацияТоваровУслугТовары.ЗаказКлиента.НомерПоДаннымКлиента КАК НомерПоДаннымКлиента,
		|	РеализацияТоваровУслугТовары.ЗаказКлиента.Номер КАК Номер,
		|	РеализацияТоваровУслугТовары.ЗаказКлиента.ДатаПоДаннымКлиента КАК ДатаПоДаннымКлиента,
		|	РеализацияТоваровУслугТовары.ЗаказКлиента.Дата КАК Дата
		|ИЗ
		|	ДокументыОснования КАК ДокументыОснования
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|		ПО ДокументыОснования.ДокументОснование = РеализацияТоваровУслугТовары.Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", СчетФактура);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция	ВыборкаПоДокументамКорректировка(СчетФактура)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СчетФактураВыданныйДокументыОснования.ДокументОснование КАК ДокументОснование,
		|	СчетФактураВыданныйДокументыОснования.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ Корректировки
		|ИЗ
		|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
		|ГДЕ
		|	СчетФактураВыданныйДокументыОснования.Ссылка = &Ссылка
		|	И СчетФактураВыданныйДокументыОснования.ДокументОснование ССЫЛКА Документ.КорректировкаРеализации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Корректировки.Ссылка КАК Ссылка,
		|	КорректировкаРеализацииРасхождения.Номенклатура КАК Номенклатура,
		|	КорректировкаРеализацииРасхождения.Характеристика КАК Характеристика,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(КорректировкаРеализацииТовары.Количество, 0) - КорректировкаРеализацииРасхождения.Количество = 0
		|			ТОГДА 0
		|		ИНАЧЕ (ЕСТЬNULL(КорректировкаРеализацииТовары.Сумма, 0) - КорректировкаРеализацииРасхождения.Сумма) / (ЕСТЬNULL(КорректировкаРеализацииТовары.Количество, 0) - КорректировкаРеализацииРасхождения.Количество)
		|	КОНЕЦ КАК ЦенаДо,
		|	ЕСТЬNULL(КорректировкаРеализацииТовары.Цена, 0) КАК Цена,
		|	ЕСТЬNULL(КорректировкаРеализацииТовары.Цена, 0) - ВЫБОР
		|		КОГДА ЕСТЬNULL(КорректировкаРеализацииТовары.Количество, 0) - КорректировкаРеализацииРасхождения.Количество = 0
		|			ТОГДА 0
		|		ИНАЧЕ (ЕСТЬNULL(КорректировкаРеализацииТовары.Сумма, 0) - КорректировкаРеализацииРасхождения.Сумма) / (ЕСТЬNULL(КорректировкаРеализацииТовары.Количество, 0) - КорректировкаРеализацииРасхождения.Количество)
		|	КОНЕЦ КАК ЦенаРазница,
		|	ЕСТЬNULL(КорректировкаРеализацииТовары.СтавкаНДС, КорректировкаРеализацииРасхождения.СтавкаНДС) КАК СтавкаНДСДо,
		|	ЕСТЬNULL(КорректировкаРеализацииТовары.СтавкаНДС, КорректировкаРеализацииРасхождения.СтавкаНДС) КАК СтавкаНДС,
		|	КорректировкаРеализацииРасхождения.СтавкаНДС КАК СтавкаНДСРазница,
		|	ЕСТЬNULL(КорректировкаРеализацииТовары.Количество, 0) - КорректировкаРеализацииРасхождения.Количество КАК КоличествоДо,
		|	ЕСТЬNULL(КорректировкаРеализацииТовары.Количество, 0) КАК Количество,
		|	КорректировкаРеализацииРасхождения.Количество КАК КоличествоРазница,
		|	ЕСТЬNULL(КорректировкаРеализацииТовары.Сумма, 0) - КорректировкаРеализацииРасхождения.Сумма КАК СуммаБезНДСДо,
		|	ЕСТЬNULL(КорректировкаРеализацииТовары.Сумма, 0) КАК СуммаБезНДС,
		|	КорректировкаРеализацииРасхождения.Сумма КАК СуммаБезНДСРазница,
		|	ЕСТЬNULL(КорректировкаРеализацииТовары.СуммаНДС, 0) - КорректировкаРеализацииРасхождения.СуммаНДС КАК СуммаНДСДо,
		|	ЕСТЬNULL(КорректировкаРеализацииТовары.СуммаНДС, 0) КАК СуммаНДС,
		|	КорректировкаРеализацииРасхождения.СуммаНДС КАК СуммаНДСРазница,
		|	ЕСТЬNULL(КорректировкаРеализацииТовары.СуммаСНДС, 0) - КорректировкаРеализацииРасхождения.СуммаСНДС КАК СуммаСНДСДо,
		|	ЕСТЬNULL(КорректировкаРеализацииТовары.СуммаСНДС, 0) КАК СуммаСНДС,
		|	КорректировкаРеализацииРасхождения.СуммаСНДС КАК СуммаСНДСРазница
		|ИЗ
		|	Корректировки КАК Корректировки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации.Расхождения КАК КорректировкаРеализацииРасхождения
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации.Товары КАК КорректировкаРеализацииТовары
		|			ПО КорректировкаРеализацииРасхождения.Ссылка = КорректировкаРеализацииТовары.Ссылка
		|				И КорректировкаРеализацииРасхождения.Номенклатура = КорректировкаРеализацииТовары.Номенклатура
		|				И КорректировкаРеализацииРасхождения.Характеристика = КорректировкаРеализацииТовары.Характеристика
		|				И КорректировкаРеализацииРасхождения.ЗаказКлиента = КорректировкаРеализацииТовары.ЗаказКлиента
		|				И КорректировкаРеализацииРасхождения.КодСтроки = КорректировкаРеализацииТовары.КодСтроки
		|		ПО Корректировки.ДокументОснование = КорректировкаРеализацииРасхождения.Ссылка
		|ИТОГИ ПО
		|	Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", СчетФактура);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
КонецФункции

Функция СоединитьСтроку(МассивСтрок, Разделитель)
	
	МассивРезультат = Новый Массив;
	Для каждого СтрокаМассива Из МассивСтрок Цикл
	
		Если ЗначениеЗаполнено(СтрокаМассива) Тогда
			
			МассивРезультат.Добавить(СтрокаМассива);
			
		КонецЕсли;
		
	КонецЦикла; 
	
	Возврат СтрСоединить(МассивРезультат, Разделитель);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
